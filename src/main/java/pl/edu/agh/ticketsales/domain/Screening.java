package pl.edu.agh.ticketsales.domain;

//figure out the best way to initialize seatsStatus matrix


import org.apache.commons.lang.time.DateUtils;

import javax.persistence.*;
import java.io.Serializable;
import java.util.*;


@Entity
public class Screening implements Serializable {
    //static final long ONE_MINUTE_IN_MILLIS=60000;//millisecs

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Integer id;

    private boolean[] seatsStatus;
    private int rowsNumber;
    private int rowLength;
    private Date startDate;

    private Integer theaterId;  //not needed directly
    private Integer hallId;
    private Integer movieId;


    private Integer duration;   //optional
    private Date endDate;   //autogenerated based on movie duration
    @ElementCollection(targetClass=Integer.class)
    private Set<Integer> bookingId = new HashSet<>();


// <basic getters&setters>
    public Integer getId() {return id;}
    public void setId(Integer id) { this.id = id;}

    public Integer getTheaterId() {return theaterId;}

    public Integer getHallId() {return hallId;}
    public void setHallId(Hall hall) {
        this.hallId = hall.getId();
        this.theaterId = hall.getTheaterId();
        if(seatsStatus != null && Arrays.asList(seatsStatus).contains(true)){
            int oldRowLength = this.rowLength;
            int rows = Math.min(this.rowsNumber, hall.getRows());
            int rowLength = Math.min(this.rowLength, hall.getRowLength());
            boolean[] tempSeats = this.seatsStatus;   //keep old data
            this.seatsStatus = new boolean[hall.getRows() * hall.getRowLength()];    //create clean array
            //iterate over rowsNumber and row lengths to keep as much of old data as possible
            for(int i= 0; i < rows; i++){
                for(int j =0; j < rowLength; j++){
                    this.seatsStatus[i*rowLength + j] = tempSeats[i*oldRowLength + j];
                }
            }
            //this will only salvage the problem with displaying taken seats, but if hall got downsized it won't fix problem with people who booked removed seats
            //this situation should never happen irl anyway
        } else {
            this.rowsNumber = hall.getRows();
            this.rowLength = hall.getRowLength();
            this.seatsStatus = new boolean[hall.getRows() * hall.getRowLength()];
        }
    }

    public Integer getMovieId() {return movieId;}
    public void setMovieId(Movie movie) {
        this.movieId = movie.getId();
        this.duration = movie.getDuration();
        if(this.startDate != null) {
            this.endDate = DateUtils.addMinutes(this.startDate, this.duration = movie.getDuration());
        }
    }

    public Date getStartDate() {return startDate;}
    public void setStartDate(Date startDate) {
        this.startDate = startDate;
        if(this.duration != 0){
            this.endDate = DateUtils.addMinutes(this.startDate, this.duration);
        }
    }

    public int getRows() {
        return rowsNumber;
    }

    public void setRows(int rows) {
        this.rowsNumber = rows;
    }

    public int getRowLength() {
        return rowLength;
    }

    public void setRowLength(int rowLength) {
        this.rowLength = rowLength;
    }

    public Integer getDuration() { return duration; }

    public Date getEndDate() {return endDate;}

    public boolean[] getSeatsStatus() {return this.seatsStatus;}
    public boolean getSeatStatus(int row, int rowLength) { return this.seatsStatus[row*this.rowLength + rowLength]; }
//    public void newSeats();
    public void setSeatStatus(int row, int seat, boolean status) {
        this.seatsStatus[row * this.rowLength + seat] = status;
    }

// <Set operations>
    public Set<Integer> bookingIDs() { return bookingId; }
    public void addBookingId(Integer bookingId) { this.bookingId.add(bookingId); }
    public void addBookingIds(Set<Integer> bookingIds) { this.bookingId.addAll(bookingIds); }
    public void removeBookingId(Integer bookingId) { this.bookingId.remove(bookingId); }
}
